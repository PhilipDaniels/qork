C# to Rust
==========
To make a struct with private immutable data, just declare a field, then a pub fn with the
same name which returns a reference to that data. Methods should take a reference otherwise
you will get confusing compiler errors about lifetimes (because you moved an object).

Next
====
* Create a UserInfo struct.
* --create-config-dir : creates a skeleton configuration directory - need to define it!
* Consider removing hostname and replacing with the more widely applicable nix crate.
  This would be good for getting the user info, but is not a solution for Windows.

If we are going to use a static plugin system, is there any point building our own modules
that wrap things like the sysinf crate?
  - Yes. We need some OS-abstraction, at least. Some crates, at least in the short term,
    may not work on Windows, and we want to provide a unified, simple API which hides
    that fact.
  - A good split: SystemInfo, ProcessInfo, DiskInfo, NetworkInfo.
    We already have ProgramInfo, which is almost a duplicate of ProcessInfo.
* Try the SystemStat crate instead of sysinfo?
* In ProgramInfo, we have now get everything from http://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html
* We also effectively have got http://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html#System-Environment


QorkDirs design
===============
* Inits using XDG and a profile.
* We want to support portable operation with the minimal of fuss.

Variable            fn                  Default                 Example with Profile
========            ==                  =======                 ====================
XDG_CONFIG_HOME     config_dir()        $HOME/.config           $HOME/.config/qork/default/
XDG_DATA_HOME       data_dir()          $HOME/.local/share      $HOME/.local/share/qork/default/mru.toml
XDG_CACHE_HOME      cache_dir()         $HOME/.cache
XDG_RUNTIME_DIR     runtime_dir()       ???

Our RuntimeData must become SessionData and be stored in data_dir(). This is to avoid confusion with XDG_RUNTIME_DIR,
which is used for temporary sockets etc.

Can we consider some things fatal?
* dirs do not exist/cannot be created
* dirs are actually files
* files are actually dirs

Can we create a higher-level abstraction, something like a src/sink for file data?

QorkDirs.config_file("mru.toml").and_then()
         ^ does File::create()

QorkDirs.config_file("mru.toml", data_writer: Fn);
QorkDirs.config_file(Read, "mru.toml", Func()-> result)


QorkDirs.place_config_file(&str) -> Result<File, err>



open file - Need open options.
create file - Need create options.
delete_config
place_config_file - is a mixture of the two!

Two structures:
    ConfigDirs
    DataDirs
XDG supports these operations
  find_{config,data,cache,runtime}_file -> Option<PathBuf>       - gets an existing file, or returns None
  place_{config,data,cache,runtime}_file -> ioResult<PathBuf>    - gets a filepath, creates leading dirs (errors if cannot)

  create_{config,data,cache,runtime}_directory  - creates dirs under the XDG dir structure
  list_{config,data,cache,runtime}_files_[once] - lists files under the XDG dir structure
  get_{config,data,cache}_home                  - gets the root dir under the XDG dir structure

>> To load a file, use find(). We should wrap find() and check exists and is a file. Or we can write a series of open() methods.
>> To save a file, use place().



Program Structure
=================
Context
  SystemInfo
  ProgramInfo
    CommandLineArguments
  BaseDirectories
  Configuration

Logging Levels
==============
trace, debug, info, warn, error, crit.
debug only appears in Debug mode builds. trace does not appear at all by default.

Package Platforms
=================
* sysinfo does not work on Windows.

Thoughts On Rust
================
Crates on crates.io should say which platforms they support (on the front page, they do in the docs).

I just discovered you can browse the source directly on docs.rs - this is a fantastic learning resource!
Platforms show up on docs.rs, but why is that not on crates.io?
There are 6 types of strings, which makes doing simple stuff like opening files harder than it should be.
Just printing a PathBuf is difficult. Why do we need this OsString type as well
as &str and String?

Also, there is no comprehensive treatment of date and time.
Formatting of SystemTime is really difficult! Need to bring in chrono
and then Google for the special magic function to convert a SystemTime
into a DateTime.

