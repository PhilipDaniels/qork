C# to Rust
==========
To make a struct with private immutable data, just declare a field, then a pub fn with the
same name which returns a reference to that data. Methods should take a reference otherwise
you will get confusing compiler errors about lifetimes (because you moved an object).

Next
====
* Create a UserInfo struct.
* Consider removing hostname and replacing with the more widely applicable nix crate.
  This would be good for getting the user info, but is not a solution for Windows.

If we are going to use a static plugin system, is there any point building our own modules
that wrap things like the sysinf crate?
  - Yes. We need some OS-abstraction, at least. Some crates, at least in the short term,
    may not work on Windows, and we want to provide a unified, simple API which hides
    that fact.
  - A good split: SystemInfo, ProcessInfo, DiskInfo, NetworkInfo.
    We already have ProgramInfo, which is almost a duplicate of ProcessInfo.
* Try the SystemState crate instead of sysinfo?
* In ProgramInfo, we have now get everything from http://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html
* We also effectively have got http://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html#System-Environment
* Ability to get a filename that does not exist (or is highly unlikely to)


Program Structure
=================
Context
  SystemInfo
  ProgramInfo
    CommandLineArguments
  BaseDirectories
  Configuration

Logging Levels
==============
trace, debug, info, warn, error, crit.
debug only appears in Debug mode builds. trace does not appear at all by default.

Package Platforms
=================
* sysinfo does not work on Windows.

Thoughts On Rust
================
Crates on crates.io should say which platforms they support (on the front page, they do in the docs).

I just discovered you can browse the source directly on docs.rs - this is a fantastic learning resource!
Platforms show up on docs.rs, but why is that not on crates.io?
There are 6 types of strings, which makes doing simple stuff like opening files harder than it should be.
Just printing a PathBuf is difficult. Why do we need this OsString type as well
as &str and String?

Also, there is no comprehensive treatment of date and time.
Formatting of SystemTime is really difficult! Need to bring in chrono
and then Google for the special magic function to convert a SystemTime
into a DateTime.

Non-lexical lifetimes is far too easy to run into. I was stumped for days and eventually had to
ask on the rust-lang forums.


Rc
==
Single-threaded reference counting pointer.
Rc<T> = shared ownership of a value of type T, allocated on the heap.
calling clone() gives you a new pointer to the same value. When the last Rc pointer is dropped,
the value is also dropped.

Rc<T> automatically deferences to T so you can call T's methods on an Rc<T>.

The T value cannot be mutated.
Not thread-safe (use std::sync::Arc instead).

Cell & RefCell
==============
Cell: A mutable memory location.
RefCell: A mutable memory location with dynamically checked borrow rules.

There is no deref so you cannot call T's methods on RefCell<T>.

Values of Cell<T> and RefCell<T> may be mutated through shared references (i.e. &T) rather than
just through unique references (&mut T).

They are used for 'interior mutability'.

Cell<T> moves values in and out.

RefCell<T> uses Rust lifetimes to implement 'dynamic borrowing', where one can claim temporary,
exclusive mutable access to the inner value. This is checked at runtime (it is a runtime version
of the borrow checker). If you try to borrow a value that is already mutably borrowed, a panic
occurs.

RefCell is single threaded: use RwLock<T> or Mutex<T> for shared mutability in a multi-threaded
situation.

Key methods:
    borrow(&self) -> Ref<T>
        Creates an immutable borrow, which lasts until the Ref<T> exits scope.
        Panics if the T is currently mutably borrowed.
    borrow_mut(&self) -> RefMut<T>
        Creates an mutable borrow, which lasts until the Ref<T> exits scope.
        Panics if the T is currently borrowed, either mutably or immutably.
